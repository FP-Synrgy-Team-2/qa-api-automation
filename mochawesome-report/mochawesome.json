{
  "stats": {
    "suites": 15,
    "tests": 60,
    "passes": 45,
    "pending": 0,
    "failures": 15,
    "start": "2024-08-25T09:53:37.497Z",
    "end": "2024-08-25T09:57:52.459Z",
    "duration": 254962,
    "testsRegistered": 66,
    "passPercent": 68.18181818181817,
    "pendingPercent": 0,
    "other": 2,
    "hasOther": true,
    "skipped": 6,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "cc4bbe56-b485-43cc-a7db-dc34bef52745",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "425a3a61-579e-4ceb-ad5c-126a95cb4400",
          "title": "Get Bank Account by Account Number",
          "fullFile": "C:\\Users\\Igor\\jangkau-mocha\\test\\scenarios\\getBankAccountByAccountNumber.spec.js",
          "file": "\\test\\scenarios\\getBankAccountByAccountNumber.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be successful and return bank account information for a valid account number",
              "fullTitle": "Get Bank Account by Account Number should be successful and return bank account information for a valid account number",
              "timedOut": false,
              "duration": 8228,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await getBankAccountByAccountNumber(validAccountNumber);\nexpect(res.status).to.be.equal(200);",
              "err": {},
              "uuid": "9a2fae4c-1a12-40b1-b202-0051fe11b48c",
              "parentUUID": "425a3a61-579e-4ceb-ad5c-126a95cb4400",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for an invalid account number",
              "fullTitle": "Get Bank Account by Account Number should return 404 for an invalid account number",
              "timedOut": false,
              "duration": 5810,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await getBankAccountByAccountNumber(invalidAccountNumber);\nexpect(res.status).to.be.equal(404);",
              "err": {
                "message": "AssertionError: expected 200 to equal 404",
                "estack": "AssertionError: expected 200 to equal 404\n    at Context.<anonymous> (file:///C:/Users/Igor/jangkau-mocha/test/scenarios/getBankAccountByAccountNumber.spec.js:20:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 200\n+ 404\n"
              },
              "uuid": "116b60e3-759e-441f-a4be-51188775b3d3",
              "parentUUID": "425a3a61-579e-4ceb-ad5c-126a95cb4400",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 for an empty account number",
              "fullTitle": "Get Bank Account by Account Number should return 400 for an empty account number",
              "timedOut": false,
              "duration": 5812,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await getBankAccountByAccountNumber(emptyAccountNumber);\nexpect(res.status).to.be.equal(404);",
              "err": {},
              "uuid": "59527d2c-5c65-4602-b6c4-8205e3b6caf0",
              "parentUUID": "425a3a61-579e-4ceb-ad5c-126a95cb4400",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9a2fae4c-1a12-40b1-b202-0051fe11b48c",
            "59527d2c-5c65-4602-b6c4-8205e3b6caf0"
          ],
          "failures": [
            "116b60e3-759e-441f-a4be-51188775b3d3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 19850,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000000
        },
        {
          "uuid": "129ebb45-16fa-408e-8122-fd8202669b3c",
          "title": "Get Bank Account by User ID",
          "fullFile": "C:\\Users\\Igor\\jangkau-mocha\\test\\scenarios\\getBankAccountByUserId.spec.js",
          "file": "\\test\\scenarios\\getBankAccountByUserId.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be successful and return bank account information for a valid user ID",
              "fullTitle": "Get Bank Account by User ID should be successful and return bank account information for a valid user ID",
              "timedOut": false,
              "duration": 5380,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await getBankAccountByUserId(validUserId);\nexpect(res.status).to.be.equal(200);",
              "err": {},
              "uuid": "d989a50d-5e0b-4e88-b0dc-a99247aef0c3",
              "parentUUID": "129ebb45-16fa-408e-8122-fd8202669b3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for an invalid user ID",
              "fullTitle": "Get Bank Account by User ID should return 404 for an invalid user ID",
              "timedOut": false,
              "duration": 4808,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await getBankAccountByUserId(invalidUserId);\nexpect(res.status).to.be.equal(404);",
              "err": {
                "message": "AssertionError: expected 200 to equal 404",
                "estack": "AssertionError: expected 200 to equal 404\n    at Context.<anonymous> (file:///C:/Users/Igor/jangkau-mocha/test/scenarios/getBankAccountByUserId.spec.js:20:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 200\n+ 404\n"
              },
              "uuid": "4ef10175-8541-4329-b013-b8f68981091c",
              "parentUUID": "129ebb45-16fa-408e-8122-fd8202669b3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 for an empty user ID",
              "fullTitle": "Get Bank Account by User ID should return 400 for an empty user ID",
              "timedOut": false,
              "duration": 5033,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await getBankAccountByUserId(emptyUserId);\nexpect(res.status).to.be.equal(404);",
              "err": {},
              "uuid": "5cb1c633-c292-4c37-a2bf-434d2bdc61bf",
              "parentUUID": "129ebb45-16fa-408e-8122-fd8202669b3c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d989a50d-5e0b-4e88-b0dc-a99247aef0c3",
            "5cb1c633-c292-4c37-a2bf-434d2bdc61bf"
          ],
          "failures": [
            "4ef10175-8541-4329-b013-b8f68981091c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15221,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000000
        },
        {
          "uuid": "606bd62b-8540-4f42-a5f7-3cdd86b25c8e",
          "title": "Get All Bank Accounts",
          "fullFile": "C:\\Users\\Igor\\jangkau-mocha\\test\\scenarios\\getBankAccounts.spec.js",
          "file": "\\test\\scenarios\\getBankAccounts.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be successful and return a list of bank accounts",
              "fullTitle": "Get All Bank Accounts should be successful and return a list of bank accounts",
              "timedOut": false,
              "duration": 35697,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await getBankAccounts();\nexpect(res.status).to.be.equal(200);",
              "err": {
                "message": "SyntaxError: Expected ':' after property name in JSON at position 2022123",
                "estack": "SyntaxError: Expected ':' after property name in JSON at position 2022123\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\lib\\node\\parsers\\json.js:13:31)\n    at IncomingMessage.emit (node:events:531:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "b46dc63b-cd6f-40c9-9325-19da7e2b42dc",
              "parentUUID": "606bd62b-8540-4f42-a5f7-3cdd86b25c8e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b46dc63b-cd6f-40c9-9325-19da7e2b42dc"
          ],
          "pending": [],
          "skipped": [],
          "duration": 35697,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000000
        },
        {
          "uuid": "0d82f65b-526b-4a62-8ea4-4b6364ce7ead",
          "title": "Get Saved Bank Accounts By User ID",
          "fullFile": "C:\\Users\\Igor\\jangkau-mocha\\test\\scenarios\\getSavedAccounts .spec.js",
          "file": "\\test\\scenarios\\getSavedAccounts .spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be successful when retrieving saved accounts for a valid user ID",
              "fullTitle": "Get Saved Bank Accounts By User ID should be successful when retrieving saved accounts for a valid user ID",
              "timedOut": false,
              "duration": 4506,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await getSavedAccounts(validUserId);\nexpect(res.status).to.be.equal(200);",
              "err": {},
              "uuid": "9c7858c0-fa4c-4dbe-a0cb-b4e7aaee0002",
              "parentUUID": "0d82f65b-526b-4a62-8ea4-4b6364ce7ead",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error for an invalid user ID",
              "fullTitle": "Get Saved Bank Accounts By User ID should return an error for an invalid user ID",
              "timedOut": false,
              "duration": 4632,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await getSavedAccounts(invalidUserId);\nexpect(res.status).to.be.equal(400);",
              "err": {},
              "uuid": "c49b6fd7-e456-4756-bd21-14c050082724",
              "parentUUID": "0d82f65b-526b-4a62-8ea4-4b6364ce7ead",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error with null user ID",
              "fullTitle": "Get Saved Bank Accounts By User ID should return an error with null user ID",
              "timedOut": false,
              "duration": 4539,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await getSavedAccounts(\"\");\nexpect(res.status).to.be.equal(404);",
              "err": {},
              "uuid": "91c4c361-2425-4e88-a3f6-ca43a0ef6875",
              "parentUUID": "0d82f65b-526b-4a62-8ea4-4b6364ce7ead",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9c7858c0-fa4c-4dbe-a0cb-b4e7aaee0002",
            "c49b6fd7-e456-4756-bd21-14c050082724",
            "91c4c361-2425-4e88-a3f6-ca43a0ef6875"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13677,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000000
        },
        {
          "uuid": "fa569021-a81b-4e9f-93dd-ded2e0905819",
          "title": "Get Transaction By ID",
          "fullFile": "C:\\Users\\Igor\\jangkau-mocha\\test\\scenarios\\getTransactionById.spec.js",
          "file": "\\test\\scenarios\\getTransactionById.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook for \"should be successful when retrieving a transaction with a valid ID\"",
              "fullTitle": "Get Transaction By ID \"before each\" hook for \"should be successful when retrieving a transaction with a valid ID\"",
              "timedOut": false,
              "duration": 3812,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    account_id: testData.account_bank_data[2].account_id,\n    beneficiary_account: testData.account_bank_data[3].account_id,\n    amount: 20000,\n    transaction_date: \"2024-07-15 15:05:14.293\",\n    note: \"Uang kos\",\n    saved: true,\n};\nconst trx = await transferFunds(payload);\ntrxId = trx.body.data.transaction_id;",
              "err": {
                "message": "TypeError: Cannot read properties of null (reading 'transaction_id')",
                "estack": "TypeError: Cannot read properties of null (reading 'transaction_id')\n    at Context.<anonymous> (file:///C:/Users/Igor/jangkau-mocha/test/scenarios/getTransactionById.spec.js:20:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "b4be32fa-fcc5-4cfe-b621-46dc232d2ff5",
              "parentUUID": "fa569021-a81b-4e9f-93dd-ded2e0905819",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be successful when retrieving a transaction with a valid ID",
              "fullTitle": "Get Transaction By ID should be successful when retrieving a transaction with a valid ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await getTransactionById(trxId);\nexpect(res.status).to.be.equal(200);",
              "err": {},
              "uuid": "7b4cc259-7d0e-4016-ab55-8968a9854d4d",
              "parentUUID": "fa569021-a81b-4e9f-93dd-ded2e0905819",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should return error for an invalid transaction ID",
              "fullTitle": "Get Transaction By ID should return error for an invalid transaction ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await getTransactionById(\n    \"123d4a9-f6e5-42a4-b650-39326176090c\"\n);\nexpect(res.status).to.be.equal(404);",
              "err": {},
              "uuid": "b13aea78-ebc6-4b0b-a718-6b2b2730172a",
              "parentUUID": "fa569021-a81b-4e9f-93dd-ded2e0905819",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should return error for an empty transaction ID",
              "fullTitle": "Get Transaction By ID should return error for an empty transaction ID",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = \"\";\nconst res = await getTransactionById(payload);\nexpect(res.status).to.be.equal(404);",
              "err": {},
              "uuid": "b16d37cb-e0cd-4ac8-871b-a601e4637be5",
              "parentUUID": "fa569021-a81b-4e9f-93dd-ded2e0905819",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "7b4cc259-7d0e-4016-ab55-8968a9854d4d",
            "b13aea78-ebc6-4b0b-a718-6b2b2730172a",
            "b16d37cb-e0cd-4ac8-871b-a601e4637be5"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000000
        },
        {
          "uuid": "9fad1f62-06c4-4462-a861-130df6e8830e",
          "title": "Get Transaction History By User ID",
          "fullFile": "C:\\Users\\Igor\\jangkau-mocha\\test\\scenarios\\getTransactionHistory.spec.js",
          "file": "\\test\\scenarios\\getTransactionHistory.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be successful when retrieving transaction history for a valid user ID",
              "fullTitle": "Get Transaction History By User ID should be successful when retrieving transaction history for a valid user ID",
              "timedOut": false,
              "duration": 3915,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    start_date: \"2024-08-15\",\n    end_date: \"2024-08-19\",\n};\nconst res = await getTransactionHistory(payload, validUserId);\nexpect(res.status).to.be.equal(200);",
              "err": {
                "message": "AssertionError: expected 401 to equal 200",
                "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (file:///C:/Users/Igor/jangkau-mocha/test/scenarios/getTransactionHistory.spec.js:18:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 200\n"
              },
              "uuid": "8bf2f6cb-7b0c-4c52-8fe2-1b905b89ebd6",
              "parentUUID": "9fad1f62-06c4-4462-a861-130df6e8830e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be failed when using invalid user ID",
              "fullTitle": "Get Transaction History By User ID should be failed when using invalid user ID",
              "timedOut": false,
              "duration": 3600,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    start_date: \"2024-01-01\",\n    end_date: \"2024-01-02\",\n};\nconst res = await getTransactionHistory(payload, invalidUserId);\nexpect(res.body.code).to.be.equal(400);",
              "err": {},
              "uuid": "88554a6a-4592-45d9-b126-147d2841ca6d",
              "parentUUID": "9fad1f62-06c4-4462-a861-130df6e8830e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return failed with invalid start_date format",
              "fullTitle": "Get Transaction History By User ID should return failed with invalid start_date format",
              "timedOut": false,
              "duration": 4689,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    start_date: \"07-15-2024\",\n    end_date: \"2024-01-02\",\n};\nconst res = await getTransactionHistory(payload, invalidUserId);\nexpect(res.body.code).to.be.equal(400);",
              "err": {},
              "uuid": "782dc0ff-9095-476d-8628-ecc8b2f60e40",
              "parentUUID": "9fad1f62-06c4-4462-a861-130df6e8830e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return failed with invalid end_date format",
              "fullTitle": "Get Transaction History By User ID should return failed with invalid end_date format",
              "timedOut": false,
              "duration": 3634,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    start_date: \"2024-01-01\",\n    end_date: \"07-19-2024\",\n};\nconst res = await getTransactionHistory(payload, invalidUserId);\nexpect(res.body.code).to.be.equal(400);",
              "err": {},
              "uuid": "412ce7d2-caa8-4874-808c-bda449aff6c0",
              "parentUUID": "9fad1f62-06c4-4462-a861-130df6e8830e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "88554a6a-4592-45d9-b126-147d2841ca6d",
            "782dc0ff-9095-476d-8628-ecc8b2f60e40",
            "412ce7d2-caa8-4874-808c-bda449aff6c0"
          ],
          "failures": [
            "8bf2f6cb-7b0c-4c52-8fe2-1b905b89ebd6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15838,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000000
        },
        {
          "uuid": "37c1f8a2-dd2b-40c2-b303-1f0515ccd2b0",
          "title": "Get User by ID",
          "fullFile": "C:\\Users\\Igor\\jangkau-mocha\\test\\scenarios\\getUserById.spec.js",
          "file": "\\test\\scenarios\\getUserById.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be successful with a valid user ID",
              "fullTitle": "Get User by ID should be successful with a valid user ID",
              "timedOut": false,
              "duration": 3601,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userId = testData.users[2].user_id;\nconst res = await getUserById(userId);\nexpect(res.body.code).to.be.equal(200);",
              "err": {},
              "uuid": "12f43e61-ec55-4681-8afe-c73f489f44f4",
              "parentUUID": "37c1f8a2-dd2b-40c2-b303-1f0515ccd2b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with an invalid user ID",
              "fullTitle": "Get User by ID should fail with an invalid user ID",
              "timedOut": false,
              "duration": 3621,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const userId = \"invalidUserId\";\nconst res = await getUserById(userId);\nexpect(res.body.status).to.be.equal(404);",
              "err": {
                "message": "AssertionError: expected 400 to equal 404",
                "estack": "AssertionError: expected 400 to equal 404\n    at Context.<anonymous> (file:///C:/Users/Igor/jangkau-mocha/test/scenarios/getUserById.spec.js:21:39)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 400\n+ 404\n"
              },
              "uuid": "de547974-2720-4f88-9e84-33b2b188f585",
              "parentUUID": "37c1f8a2-dd2b-40c2-b303-1f0515ccd2b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with a missing user ID",
              "fullTitle": "Get User by ID should fail with a missing user ID",
              "timedOut": false,
              "duration": 3988,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await getUserById();\nexpect(res.body.status).to.be.equal(404);",
              "err": {
                "message": "AssertionError: expected 400 to equal 404",
                "estack": "AssertionError: expected 400 to equal 404\n    at Context.<anonymous> (file:///C:/Users/Igor/jangkau-mocha/test/scenarios/getUserById.spec.js:27:39)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 400\n+ 404\n"
              },
              "uuid": "ed62f50d-7682-4b77-aedd-dd4adf9b595e",
              "parentUUID": "37c1f8a2-dd2b-40c2-b303-1f0515ccd2b0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "12f43e61-ec55-4681-8afe-c73f489f44f4"
          ],
          "failures": [
            "de547974-2720-4f88-9e84-33b2b188f585",
            "ed62f50d-7682-4b77-aedd-dd4adf9b595e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 11210,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000000
        },
        {
          "uuid": "32d638b0-3ed1-4695-9e64-7a9df1f7fc2a",
          "title": "Login",
          "fullFile": "C:\\Users\\Igor\\jangkau-mocha\\test\\scenarios\\login.spec.js",
          "file": "\\test\\scenarios\\login.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Login\"",
              "fullTitle": "Login \"before all\" hook in \"Login\"",
              "timedOut": false,
              "duration": 1205,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const phoneNumbers = randomPhoneNumber();\nregisteredUser = {\n    username: generateUsername(),\n    email_address: faker.internet.email(),\n    password: \"Passw0rd123!\",\n    full_name: faker.person.fullName(),\n    phone_number: phoneNumbers.validNumber,\n};\nawait register(registeredUser);\nloginUser = {\n    username: registeredUser.username,\n    password: registeredUser.password,\n};",
              "err": {},
              "uuid": "ce509ecc-166c-464d-a2e6-fabd6b7124c3",
              "parentUUID": "32d638b0-3ed1-4695-9e64-7a9df1f7fc2a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be successful login with valid credentials",
              "fullTitle": "Login should be successful login with valid credentials",
              "timedOut": false,
              "duration": 3582,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await login(loginUser);\nexpect(res.status).to.be.equal(200);",
              "err": {},
              "uuid": "3e1b54dd-d895-4148-8d97-6f88263ad6f5",
              "parentUUID": "32d638b0-3ed1-4695-9e64-7a9df1f7fc2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to login with invalid username",
              "fullTitle": "Login should fail to login with invalid username",
              "timedOut": false,
              "duration": 140,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let payload = {\n    username: \"InvalidUsername\",\n    password: loginUser.password,\n};\nconst res = await login(payload);\nexpect(res.status).to.be.equal(400);",
              "err": {},
              "uuid": "71f25c1e-0cef-4338-89ce-0fba830479de",
              "parentUUID": "32d638b0-3ed1-4695-9e64-7a9df1f7fc2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to login with invalid password",
              "fullTitle": "Login should fail to login with invalid password",
              "timedOut": false,
              "duration": 115,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let payload = {\n    username: loginUser.username,\n    password: \"WrongPassword\",\n};\nconst res = await login(payload);\nexpect(res.status).to.be.equal(400);",
              "err": {},
              "uuid": "25cc336a-e0c0-44c3-8217-e520b1a20870",
              "parentUUID": "32d638b0-3ed1-4695-9e64-7a9df1f7fc2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to login with empty username",
              "fullTitle": "Login should fail to login with empty username",
              "timedOut": false,
              "duration": 151,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let payload = {\n    username: \"\",\n    password: loginUser.password,\n};\nconst res = await login(payload);\nexpect(res.status).to.be.equal(400);",
              "err": {},
              "uuid": "7767c1db-fbef-4960-9314-cd2c677666d9",
              "parentUUID": "32d638b0-3ed1-4695-9e64-7a9df1f7fc2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to login with empty password",
              "fullTitle": "Login should fail to login with empty password",
              "timedOut": false,
              "duration": 111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let payload = {\n    username: loginUser.username,\n    password: \"\",\n};\nconst res = await login(payload);\nexpect(res.status).to.be.equal(400);",
              "err": {},
              "uuid": "3c10028a-727c-42c8-b3d1-8e6295360abd",
              "parentUUID": "32d638b0-3ed1-4695-9e64-7a9df1f7fc2a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3e1b54dd-d895-4148-8d97-6f88263ad6f5",
            "71f25c1e-0cef-4338-89ce-0fba830479de",
            "25cc336a-e0c0-44c3-8217-e520b1a20870",
            "7767c1db-fbef-4960-9314-cd2c677666d9",
            "3c10028a-727c-42c8-b3d1-8e6295360abd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4099,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000000
        },
        {
          "uuid": "092efecb-ee34-4f9c-b48a-72f22aeef482",
          "title": "Refresh Token",
          "fullFile": "C:\\Users\\Igor\\jangkau-mocha\\test\\scenarios\\refreshToken.spec.js",
          "file": "\\test\\scenarios\\refreshToken.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"should successfully retrieve a new access token using refresh token\"",
              "fullTitle": "Refresh Token \"before all\" hook for \"should successfully retrieve a new access token using refresh token\"",
              "timedOut": false,
              "duration": 167,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await login({\n    username: testData.username,\n    password: testData.password,\n});\nrefreshTokenValue = res.body.data.refresh_token;",
              "err": {
                "message": "TypeError: Cannot read properties of null (reading 'refresh_token')",
                "estack": "TypeError: Cannot read properties of null (reading 'refresh_token')\n    at Context.<anonymous> (file:///C:/Users/Igor/jangkau-mocha/test/scenarios/refreshToken.spec.js:17:43)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "4fc3492c-9947-4585-9716-bb0f3f7db577",
              "parentUUID": "092efecb-ee34-4f9c-b48a-72f22aeef482",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should successfully retrieve a new access token using refresh token",
              "fullTitle": "Refresh Token should successfully retrieve a new access token using refresh token",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await refreshToken(refreshTokenValue);\n\nexpect(res.body.code).to.be.equal(200);",
              "err": {},
              "uuid": "c3522192-0211-4fc6-82c7-f8cf7af042c4",
              "parentUUID": "092efecb-ee34-4f9c-b48a-72f22aeef482",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should fail to retrieve a new access token with an empty refresh token",
              "fullTitle": "Refresh Token should fail to retrieve a new access token with an empty refresh token",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await refreshToken(\"\");\nexpect(res.body.code).to.be.equal(400);",
              "err": {},
              "uuid": "3ee8a303-55d3-48af-b3a0-03682a69e712",
              "parentUUID": "092efecb-ee34-4f9c-b48a-72f22aeef482",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should fail to retrieve a new access token with an invalid refresh token",
              "fullTitle": "Refresh Token should fail to retrieve a new access token with an invalid refresh token",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await refreshToken(\"InvalidRefreshToken123\");\nexpect(res.body.code).to.be.equal(400);",
              "err": {},
              "uuid": "d711c005-c108-4543-8f23-43bc6d5e758d",
              "parentUUID": "092efecb-ee34-4f9c-b48a-72f22aeef482",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "c3522192-0211-4fc6-82c7-f8cf7af042c4",
            "3ee8a303-55d3-48af-b3a0-03682a69e712",
            "d711c005-c108-4543-8f23-43bc6d5e758d"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000000
        },
        {
          "uuid": "8c93c2d5-7715-4639-b193-f688789587f5",
          "title": "Register",
          "fullFile": "C:\\Users\\Igor\\jangkau-mocha\\test\\scenarios\\register.spec.js",
          "file": "\\test\\scenarios\\register.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be successful register with valid payload",
              "fullTitle": "Register should be successful register with valid payload",
              "timedOut": false,
              "duration": 1099,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let payload = {\n    username: generateUsername(),\n    email_address: faker.internet.email(),\n    password: \"Passw0rd123!\",\n    full_name: faker.person.fullName(),\n    phone_number: randomPhoneNumber().validNumber,\n};\nconst res = await register(payload);\n\nexpect(res.status).to.be.equal(200);",
              "err": {},
              "uuid": "0dd92460-b0ea-4e39-8013-e57b6f9af859",
              "parentUUID": "8c93c2d5-7715-4639-b193-f688789587f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to register with empty payload",
              "fullTitle": "Register should fail to register with empty payload",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let payload = {};\nconst res = await register(payload);\nexpect(res.status).to.be.equal(400);",
              "err": {},
              "uuid": "0ef30045-a0c6-481f-9f2a-f405764d3432",
              "parentUUID": "8c93c2d5-7715-4639-b193-f688789587f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to register with invalid email address",
              "fullTitle": "Register should fail to register with invalid email address",
              "timedOut": false,
              "duration": 115,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let payload = {\n    username: \"Johndoe123456\",\n    email_address: \"invalidemail.com\",\n    password: \"Passw0rd123!\",\n    full_name: \"John Doe\",\n    phone_number: \"08223456766567\",\n};\nconst res = await register(payload);\nexpect(res.status).to.be.equal(400);",
              "err": {},
              "uuid": "5275b631-38bc-4294-9dc1-d904461ad59c",
              "parentUUID": "8c93c2d5-7715-4639-b193-f688789587f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to register with invalid password format",
              "fullTitle": "Register should fail to register with invalid password format",
              "timedOut": false,
              "duration": 257,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let payload = {\n    username: \"Johndoe123456\",\n    email_address: \"jhondeo@mail.com\",\n    password: \"password\",\n    full_name: \"John Doe\",\n    phone_number: \"08223456766567\",\n};\nconst res = await register(payload);\nexpect(res.status).to.be.equal(400);",
              "err": {},
              "uuid": "29a76504-6786-468c-b814-ba7e07e1433c",
              "parentUUID": "8c93c2d5-7715-4639-b193-f688789587f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to register with invalid phone number",
              "fullTitle": "Register should fail to register with invalid phone number",
              "timedOut": false,
              "duration": 157,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let payload = {\n    username: \"Johndoe123456\",\n    email_address: \"jhondeo@mail.com\",\n    password: \"Passw0rd123!\",\n    full_name: \"John Doe\",\n    phone_number: \"12345abc\",\n};\nconst res = await register(payload);\nexpect(res.status).to.be.equal(400);",
              "err": {},
              "uuid": "013eb5c6-8131-43b7-8754-ed421cc44029",
              "parentUUID": "8c93c2d5-7715-4639-b193-f688789587f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to register with empty username",
              "fullTitle": "Register should fail to register with empty username",
              "timedOut": false,
              "duration": 177,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let payload = {\n    username: \"\",\n    email_address: \"jhondeo@mail.com\",\n    password: \"Passw0rd123!\",\n    full_name: \"John Doe\",\n    phone_number: \"08223456766567\",\n};\nconst res = await register(payload);\nexpect(res.status).to.be.equal(400);",
              "err": {},
              "uuid": "159df72d-eea0-426a-8ea4-524c2a29645f",
              "parentUUID": "8c93c2d5-7715-4639-b193-f688789587f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to register with empty full name",
              "fullTitle": "Register should fail to register with empty full name",
              "timedOut": false,
              "duration": 101,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let payload = {\n    username: \"Johndoe123456\",\n    email_address: \"jhondeo@mail.com\",\n    password: \"Passw0rd123!\",\n    full_name: \"\",\n    phone_number: \"08223456766567\",\n};\nconst res = await register(payload);\nexpect(res.status).to.be.equal(400);",
              "err": {},
              "uuid": "188c8bf8-5203-4dea-bda6-f2c771829dcf",
              "parentUUID": "8c93c2d5-7715-4639-b193-f688789587f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to register with empty phone number",
              "fullTitle": "Register should fail to register with empty phone number",
              "timedOut": false,
              "duration": 153,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let payload = {\n    username: \"Johndoe123456\",\n    email_address: \"jhondeo@mail.com\",\n    password: \"Passw0rd123!\",\n    full_name: \"John Doe\",\n    phone_number: \"\",\n};\nconst res = await register(payload);\nexpect(res.status).to.be.equal(400);",
              "err": {},
              "uuid": "20b71fd1-2ff9-43ed-ac75-e0311603f95e",
              "parentUUID": "8c93c2d5-7715-4639-b193-f688789587f5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0dd92460-b0ea-4e39-8013-e57b6f9af859",
            "0ef30045-a0c6-481f-9f2a-f405764d3432",
            "5275b631-38bc-4294-9dc1-d904461ad59c",
            "29a76504-6786-468c-b814-ba7e07e1433c",
            "013eb5c6-8131-43b7-8754-ed421cc44029",
            "159df72d-eea0-426a-8ea4-524c2a29645f",
            "188c8bf8-5203-4dea-bda6-f2c771829dcf",
            "20b71fd1-2ff9-43ed-ac75-e0311603f95e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2182,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000000
        },
        {
          "uuid": "00186e46-d8ee-4677-8fad-b2e28d41bb00",
          "title": "Reset Password By Email",
          "fullFile": "C:\\Users\\Igor\\jangkau-mocha\\test\\scenarios\\resetPassByEmail.spec.js",
          "file": "\\test\\scenarios\\resetPassByEmail.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be successful with valid payload",
              "fullTitle": "Reset Password By Email should be successful with valid payload",
              "timedOut": false,
              "duration": 4294,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validPayload = {\n    email_address:  testData.users[2].email,\n};\nconst res = await resetPasswordByEmail(validPayload);\nexpect(res.body.code).to.be.equal(200);",
              "err": {},
              "uuid": "c4e521b1-06bf-413f-addc-0c1f7d6d58a8",
              "parentUUID": "00186e46-d8ee-4677-8fad-b2e28d41bb00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with invalid email format",
              "fullTitle": "Reset Password By Email should fail with invalid email format",
              "timedOut": false,
              "duration": 4352,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidPayload = {\n    email_address: \"invalidemail.com\",\n};\nconst res = await resetPasswordByEmail(invalidPayload);\nexpect(res.body.code).to.be.equal(400);",
              "err": {},
              "uuid": "583c257e-ed67-45f3-a1ec-24548158c5ba",
              "parentUUID": "00186e46-d8ee-4677-8fad-b2e28d41bb00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with empty email payload",
              "fullTitle": "Reset Password By Email should fail with empty email payload",
              "timedOut": false,
              "duration": 4095,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const emptyPayload = {};\nconst res = await resetPasswordByEmail(emptyPayload);\nexpect(res.body.code).to.be.equal(400);",
              "err": {},
              "uuid": "aa32dfe0-8cb7-4de8-9be7-1a9fc20661dc",
              "parentUUID": "00186e46-d8ee-4677-8fad-b2e28d41bb00",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c4e521b1-06bf-413f-addc-0c1f7d6d58a8",
            "583c257e-ed67-45f3-a1ec-24548158c5ba",
            "aa32dfe0-8cb7-4de8-9be7-1a9fc20661dc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12741,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000000
        },
        {
          "uuid": "6fdec4c3-0969-495a-b1e6-8ec0deeb7d99",
          "title": "Reset Password",
          "fullFile": "C:\\Users\\Igor\\jangkau-mocha\\test\\scenarios\\resetPassword.spec.js",
          "file": "\\test\\scenarios\\resetPassword.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be successful with all valid parameters",
              "fullTitle": "Reset Password should be successful with all valid parameters",
              "timedOut": false,
              "duration": 4431,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    email_address: testData.users[2].email,\n    otp: \"071688\",\n    new_password: \"NewPassword123!\",\n};\nconst res = await resetPassword(payload);\nexpect(res.body.code).to.be.equal(200);",
              "err": {},
              "uuid": "011deec4-8a9b-4593-a0fe-478aed5213b8",
              "parentUUID": "6fdec4c3-0969-495a-b1e6-8ec0deeb7d99",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with null email address",
              "fullTitle": "Reset Password should fail with null email address",
              "timedOut": false,
              "duration": 3695,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    email_address: \"\",\n    otp: \"071688\",\n    new_password: \"NewPassword123\",\n};\nconst res = await resetPassword(payload);\nexpect(res.body.code).to.be.equal(400);",
              "err": {},
              "uuid": "0f9c586b-77dd-4a4f-bdad-a99ee101eb4c",
              "parentUUID": "6fdec4c3-0969-495a-b1e6-8ec0deeb7d99",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with null OTP",
              "fullTitle": "Reset Password should fail with null OTP",
              "timedOut": false,
              "duration": 3758,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    email_address: \"johndoe@example.com\",\n    otp: \"\",\n    new_password: \"NewPassword123\",\n};\nconst res = await resetPassword(payload);\nexpect(res.body.code).to.be.equal(400);",
              "err": {},
              "uuid": "af8829a4-476c-493f-badd-68523d0af02f",
              "parentUUID": "6fdec4c3-0969-495a-b1e6-8ec0deeb7d99",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with null new password",
              "fullTitle": "Reset Password should fail with null new password",
              "timedOut": false,
              "duration": 3589,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    email_address: \"johndoe@example.com\",\n    otp: \"071688\",\n    new_password: \"\",\n};\nconst res = await resetPassword(payload);\nexpect(res.body.code).to.be.equal(400);",
              "err": {},
              "uuid": "0bee0b1e-f548-4a8e-aacf-68ce83917bc3",
              "parentUUID": "6fdec4c3-0969-495a-b1e6-8ec0deeb7d99",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with invalid email address",
              "fullTitle": "Reset Password should fail with invalid email address",
              "timedOut": false,
              "duration": 3811,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    email_address: \"invalid-email\",\n    otp: \"071688\",\n    new_password: \"NewPassword123\",\n};\nconst res = await resetPassword(payload);\nexpect(res.body.code).to.be.equal(400);",
              "err": {},
              "uuid": "2a0f0a0e-ce90-426b-b7e3-e88308a2b666",
              "parentUUID": "6fdec4c3-0969-495a-b1e6-8ec0deeb7d99",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with invalid OTP format",
              "fullTitle": "Reset Password should fail with invalid OTP format",
              "timedOut": false,
              "duration": 3644,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    email_address: \"johndoe@example.com\",\n    otp: 123123,\n    new_password: \"NewPassword123\",\n};\nconst res = await resetPassword(payload);\nexpect(res.body.code).to.be.equal(400);",
              "err": {},
              "uuid": "cbba6d4c-d345-4be2-a4aa-4b7ef36cc5e9",
              "parentUUID": "6fdec4c3-0969-495a-b1e6-8ec0deeb7d99",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with invalid new password format",
              "fullTitle": "Reset Password should fail with invalid new password format",
              "timedOut": false,
              "duration": 3919,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    email_address: \"johndoe@example.com\",\n    otp: \"123456\",\n    new_password: \"test\",\n};\nconst res = await resetPassword(payload);\nexpect(res.body.code).to.be.equal(400);",
              "err": {},
              "uuid": "de7ec42a-c3e3-434b-a513-433b2efa044d",
              "parentUUID": "6fdec4c3-0969-495a-b1e6-8ec0deeb7d99",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "011deec4-8a9b-4593-a0fe-478aed5213b8",
            "0f9c586b-77dd-4a4f-bdad-a99ee101eb4c",
            "af8829a4-476c-493f-badd-68523d0af02f",
            "0bee0b1e-f548-4a8e-aacf-68ce83917bc3",
            "2a0f0a0e-ce90-426b-b7e3-e88308a2b666",
            "cbba6d4c-d345-4be2-a4aa-4b7ef36cc5e9",
            "de7ec42a-c3e3-434b-a513-433b2efa044d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 26847,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000000
        },
        {
          "uuid": "58193f1b-1d22-4741-87b7-30d3851e355a",
          "title": "Transfer Funds",
          "fullFile": "C:\\Users\\Igor\\jangkau-mocha\\test\\scenarios\\transferFunds.spec.js",
          "file": "\\test\\scenarios\\transferFunds.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be a successful transfer with valid data",
              "fullTitle": "Transfer Funds should be a successful transfer with valid data",
              "timedOut": false,
              "duration": 3945,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    account_id: testData.account_bank_data[1].account_id,\n    beneficiary_account: testData.account_bank_data[3].account_id,\n    amount: 20000,\n    transaction_date: \"2024-07-15 15:05:14.293\",\n    note: \"Uang kos\",\n    saved: false,\n};\nconst res = await transferFunds(payload);\nexpect(res.status).to.be.equal(201);",
              "err": {},
              "uuid": "21546bf0-cbc6-4555-86d4-69c831993447",
              "parentUUID": "58193f1b-1d22-4741-87b7-30d3851e355a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when account_id is invalid",
              "fullTitle": "Transfer Funds should fail when account_id is invalid",
              "timedOut": false,
              "duration": 3720,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    account_id: \"invalid_account_id\",\n    beneficiary_account: testData.account_bank_data[3].account_id,\n    amount: 20000,\n    transaction_date: \"2024-07-15 15:05:14.293\",\n    note: \"Uang kos\",\n    saved: false,\n};\nconst res = await transferFunds(payload);\nexpect(res.status).to.be.equal(400);",
              "err": {},
              "uuid": "ea1aab11-80c9-47b0-b3a8-ed5c0db517c6",
              "parentUUID": "58193f1b-1d22-4741-87b7-30d3851e355a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when account_id is null",
              "fullTitle": "Transfer Funds should fail when account_id is null",
              "timedOut": false,
              "duration": 3703,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    account_id: null,\n    beneficiary_account: testData.account_bank_data[3].account_id,\n    amount: 20000,\n    transaction_date: \"2024-07-15 15:05:14.293\",\n    note: \"Uang kos\",\n    saved: false,\n};\nconst res = await transferFunds(payload);\nexpect(res.status).to.be.equal(400);",
              "err": {
                "message": "AssertionError: expected 500 to equal 400",
                "estack": "AssertionError: expected 500 to equal 400\n    at Context.<anonymous> (file:///C:/Users/Igor/jangkau-mocha/test/scenarios/transferFunds.spec.js:46:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 500\n+ 400\n"
              },
              "uuid": "44958c68-3e2a-4725-b54c-01895737296c",
              "parentUUID": "58193f1b-1d22-4741-87b7-30d3851e355a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when beneficiary_account is invalid",
              "fullTitle": "Transfer Funds should fail when beneficiary_account is invalid",
              "timedOut": false,
              "duration": 3823,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    account_id: testData.account_bank_data[2].account_id,\n    beneficiary_account: \"invalid_account_id\",\n    amount: 20000,\n    transaction_date: \"2024-07-15 15:05:14.293\",\n    note: \"Uang kos\",\n    saved: false,\n};\nconst res = await transferFunds(payload);\nexpect(res.status).to.be.equal(400);",
              "err": {},
              "uuid": "de74374f-cdf9-46ef-aff5-1d77d2cd257c",
              "parentUUID": "58193f1b-1d22-4741-87b7-30d3851e355a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when beneficiary_account is null",
              "fullTitle": "Transfer Funds should fail when beneficiary_account is null",
              "timedOut": false,
              "duration": 4059,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    account_id: testData.account_bank_data[2].account_id,\n    beneficiary_account: null,\n    amount: 20000,\n    transaction_date: \"2024-07-15 15:05:14.293\",\n    note: \"Uang kos\",\n    saved: false,\n};\nconst res = await transferFunds(payload);\nexpect(res.status).to.be.equal(400);",
              "err": {
                "message": "AssertionError: expected 500 to equal 400",
                "estack": "AssertionError: expected 500 to equal 400\n    at Context.<anonymous> (file:///C:/Users/Igor/jangkau-mocha/test/scenarios/transferFunds.spec.js:74:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 500\n+ 400\n"
              },
              "uuid": "0afd8859-933c-4e3a-94ea-901c5d21ddc8",
              "parentUUID": "58193f1b-1d22-4741-87b7-30d3851e355a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when amount is invalid",
              "fullTitle": "Transfer Funds should fail when amount is invalid",
              "timedOut": false,
              "duration": 4473,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    account_id: testData.account_bank_data[2].account_id,\n    beneficiary_account: testData.account_bank_data[3].account_id,\n    amount: \"invalid_amount\",\n    transaction_date: \"2024-07-15 15:05:14.293\",\n    note: \"Uang kos\",\n    saved: false,\n};\nconst res = await transferFunds(payload);\nexpect(res.status).to.be.equal(400);",
              "err": {},
              "uuid": "c6d60494-36fb-48d1-8c28-4e7eafb16927",
              "parentUUID": "58193f1b-1d22-4741-87b7-30d3851e355a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when amount is null",
              "fullTitle": "Transfer Funds should fail when amount is null",
              "timedOut": false,
              "duration": 5803,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    account_id: testData.account_bank_data[2].account_id,\n    beneficiary_account: testData.account_bank_data[3].account_id,\n    amount: null,\n    transaction_date: \"2024-07-15 15:05:14.293\",\n    note: \"Uang kos\",\n    saved: false,\n};\nconst res = await transferFunds(payload);\nexpect(res.status).to.be.equal(400);",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (file:///C:/Users/Igor/jangkau-mocha/test/scenarios/transferFunds.spec.js:102:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "8daa3dea-5cd0-40a1-8225-9ad6122d58df",
              "parentUUID": "58193f1b-1d22-4741-87b7-30d3851e355a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when transaction_date is invalid",
              "fullTitle": "Transfer Funds should fail when transaction_date is invalid",
              "timedOut": false,
              "duration": 5330,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    account_id: testData.account_bank_data[2].account_id,\n    beneficiary_account: testData.account_bank_data[3].account_id,\n    amount: 20000,\n    transaction_date: \"invalid_date\",\n    note: \"Uang kos\",\n    saved: false,\n};\nconst res = await transferFunds(payload);\nexpect(res.status).to.be.equal(400);",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (file:///C:/Users/Igor/jangkau-mocha/test/scenarios/transferFunds.spec.js:116:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "62d8eb53-2231-4926-914f-1555bf3a7a6e",
              "parentUUID": "58193f1b-1d22-4741-87b7-30d3851e355a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when transaction_date is null",
              "fullTitle": "Transfer Funds should fail when transaction_date is null",
              "timedOut": false,
              "duration": 7333,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    account_id: testData.account_bank_data[2].account_id,\n    beneficiary_account: testData.account_bank_data[3].account_id,\n    amount: 20000,\n    transaction_date: null,\n    note: \"Uang kos\",\n    saved: false,\n};\nconst res = await transferFunds(payload);\nexpect(res.status).to.be.equal(400);",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (file:///C:/Users/Igor/jangkau-mocha/test/scenarios/transferFunds.spec.js:130:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "9572029b-3b61-4385-a65d-314586d91f94",
              "parentUUID": "58193f1b-1d22-4741-87b7-30d3851e355a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should success when note is null",
              "fullTitle": "Transfer Funds should success when note is null",
              "timedOut": false,
              "duration": 6243,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    account_id: testData.account_bank_data[2].account_id,\n    beneficiary_account: testData.account_bank_data[3].account_id,\n    amount: 20000,\n    transaction_date: \"2024-07-15 15:05:14.293\",\n    note: null,\n    saved: false,\n};\nconst res = await transferFunds(payload);\nexpect(res.status).to.be.equal(201);",
              "err": {
                "message": "AssertionError: expected 401 to equal 201",
                "estack": "AssertionError: expected 401 to equal 201\n    at Context.<anonymous> (file:///C:/Users/Igor/jangkau-mocha/test/scenarios/transferFunds.spec.js:144:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 201\n"
              },
              "uuid": "8d4f8ae3-c46d-4cd6-9936-29330c0e2dff",
              "parentUUID": "58193f1b-1d22-4741-87b7-30d3851e355a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should success when saved is null",
              "fullTitle": "Transfer Funds should success when saved is null",
              "timedOut": false,
              "duration": 3882,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    account_id: testData.account_bank_data[2].account_id,\n    beneficiary_account: testData.account_bank_data[3].account_id,\n    amount: 20000,\n    transaction_date: \"2024-07-15 15:05:14.293\",\n    note: \"Uang kos\",\n    saved: null,\n};\nconst res = await transferFunds(payload);\nexpect(res.status).to.be.equal(201);",
              "err": {
                "message": "AssertionError: expected 401 to equal 201",
                "estack": "AssertionError: expected 401 to equal 201\n    at Context.<anonymous> (file:///C:/Users/Igor/jangkau-mocha/test/scenarios/transferFunds.spec.js:158:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 201\n"
              },
              "uuid": "7ff11b15-dc0d-47ca-a911-af57081cef7f",
              "parentUUID": "58193f1b-1d22-4741-87b7-30d3851e355a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "21546bf0-cbc6-4555-86d4-69c831993447",
            "ea1aab11-80c9-47b0-b3a8-ed5c0db517c6",
            "de74374f-cdf9-46ef-aff5-1d77d2cd257c",
            "c6d60494-36fb-48d1-8c28-4e7eafb16927"
          ],
          "failures": [
            "44958c68-3e2a-4725-b54c-01895737296c",
            "0afd8859-933c-4e3a-94ea-901c5d21ddc8",
            "8daa3dea-5cd0-40a1-8225-9ad6122d58df",
            "62d8eb53-2231-4926-914f-1555bf3a7a6e",
            "9572029b-3b61-4385-a65d-314586d91f94",
            "8d4f8ae3-c46d-4cd6-9936-29330c0e2dff",
            "7ff11b15-dc0d-47ca-a911-af57081cef7f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 52314,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000000
        },
        {
          "uuid": "f6d2cfcb-6698-4a82-825f-c6989217e739",
          "title": "Pin Validation",
          "fullFile": "C:\\Users\\Igor\\jangkau-mocha\\test\\scenarios\\validatePin.spec.js",
          "file": "\\test\\scenarios\\validatePin.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be successful with valid account number and pin",
              "fullTitle": "Pin Validation should be successful with valid account number and pin",
              "timedOut": false,
              "duration": 4459,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    account_number: testData.account_bank_data[2].account_number,\n    pin: testData.account_bank_data[2].pin,\n};\nconst res = await validatePin(payload);\nexpect(res.body.code).to.be.equal(200);",
              "err": {},
              "uuid": "f92b9688-71a1-47d3-83f5-0f804c28070f",
              "parentUUID": "f6d2cfcb-6698-4a82-825f-c6989217e739",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with invalid account number",
              "fullTitle": "Pin Validation should fail with invalid account number",
              "timedOut": false,
              "duration": 4224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    account_number: \"0000000000\",\n    pin: testData.account_bank_data[2].pin,\n};\nconst res = await validatePin(payload);\nexpect(res.body.code).to.be.equal(400);",
              "err": {},
              "uuid": "71000082-6e5f-465d-a994-2193c61e6da0",
              "parentUUID": "f6d2cfcb-6698-4a82-825f-c6989217e739",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with invalid pin",
              "fullTitle": "Pin Validation should fail with invalid pin",
              "timedOut": false,
              "duration": 8456,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    account_number: testData.account_bank_data[2].account_number,\n    pin: \"000000\",\n};\nconst res = await validatePin(payload);\nexpect(res.body.code).to.be.equal(400);",
              "err": {},
              "uuid": "160f7430-7b6d-4d8a-8b39-a19910456bab",
              "parentUUID": "f6d2cfcb-6698-4a82-825f-c6989217e739",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with missing account number",
              "fullTitle": "Pin Validation should fail with missing account number",
              "timedOut": false,
              "duration": 3745,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    pin: testData.account_bank_data[2].pin,\n};\nconst res = await validatePin(payload);\nexpect(res.body.code).to.be.equal(400);",
              "err": {},
              "uuid": "54eae92a-2a42-449a-8fd1-a7c4d0e0535a",
              "parentUUID": "f6d2cfcb-6698-4a82-825f-c6989217e739",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with missing pin",
              "fullTitle": "Pin Validation should fail with missing pin",
              "timedOut": false,
              "duration": 4183,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    account_number: testData.account_bank_data[2].account_number,\n};\nconst res = await validatePin(payload);\nexpect(res.body.code).to.be.equal(400);\nexpect(res.body.message).to.equal(\"Pin is required.\");",
              "err": {
                "message": "AssertionError: expected 500 to equal 400",
                "estack": "AssertionError: expected 500 to equal 400\n    at Context.<anonymous> (file:///C:/Users/Igor/jangkau-mocha/test/scenarios/validatePin.spec.js:56:37)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 500\n+ 400\n"
              },
              "uuid": "8aeaba10-74af-42ba-a3af-778b6fc86af1",
              "parentUUID": "f6d2cfcb-6698-4a82-825f-c6989217e739",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with both account number and pin missing",
              "fullTitle": "Pin Validation should fail with both account number and pin missing",
              "timedOut": false,
              "duration": 3715,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {};\nconst res = await validatePin(payload);\nexpect(res.body.code).to.be.equal(400);",
              "err": {},
              "uuid": "1da66f7c-11b9-4449-972c-d647731fb616",
              "parentUUID": "f6d2cfcb-6698-4a82-825f-c6989217e739",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f92b9688-71a1-47d3-83f5-0f804c28070f",
            "71000082-6e5f-465d-a994-2193c61e6da0",
            "160f7430-7b6d-4d8a-8b39-a19910456bab",
            "54eae92a-2a42-449a-8fd1-a7c4d0e0535a",
            "1da66f7c-11b9-4449-972c-d647731fb616"
          ],
          "failures": [
            "8aeaba10-74af-42ba-a3af-778b6fc86af1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 28782,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000000
        },
        {
          "uuid": "6ea413ea-80a8-48ca-aa05-fd5d409fb9d8",
          "title": "Verif OTP for reset password",
          "fullFile": "C:\\Users\\Igor\\jangkau-mocha\\test\\scenarios\\verifOtpResetPass.spec.js",
          "file": "\\test\\scenarios\\verifOtpResetPass.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be successful with valid payload",
              "fullTitle": "Verif OTP for reset password should be successful with valid payload",
              "timedOut": false,
              "duration": 3623,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const validPayload = {\n    otp: \"\",\n};\nconst res = await resetPasswordByEmail(validPayload);\nexpect(res.body.code).to.be.equal(200);",
              "err": {
                "message": "AssertionError: expected 400 to equal 200",
                "estack": "AssertionError: expected 400 to equal 200\n    at Context.<anonymous> (file:///C:/Users/Igor/jangkau-mocha/test/scenarios/verifOtpResetPass.spec.js:13:37)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 400\n+ 200\n"
              },
              "uuid": "fe80af18-abaf-48ec-8822-1c0bf23c4bf3",
              "parentUUID": "6ea413ea-80a8-48ca-aa05-fd5d409fb9d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with invalid email format",
              "fullTitle": "Verif OTP for reset password should fail with invalid email format",
              "timedOut": false,
              "duration": 3614,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidPayload = {\n    otp: \"9999999\",\n};\nconst res = await resetPasswordByEmail(invalidPayload);\nexpect(res.body.code).to.be.equal(400);",
              "err": {},
              "uuid": "56a7f8a6-d469-4436-aca7-a3d332efe20b",
              "parentUUID": "6ea413ea-80a8-48ca-aa05-fd5d409fb9d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with empty email payload",
              "fullTitle": "Verif OTP for reset password should fail with empty email payload",
              "timedOut": false,
              "duration": 3993,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const emptyPayload = {};\nconst res = await resetPasswordByEmail(emptyPayload);\nexpect(res.body.code).to.be.equal(400);",
              "err": {},
              "uuid": "8bff32ac-eb60-4e3d-9307-15815d104055",
              "parentUUID": "6ea413ea-80a8-48ca-aa05-fd5d409fb9d8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "56a7f8a6-d469-4436-aca7-a3d332efe20b",
            "8bff32ac-eb60-4e3d-9307-15815d104055"
          ],
          "failures": [
            "fe80af18-abaf-48ec-8822-1c0bf23c4bf3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 11230,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}